---
title: "Seminar 1 fasit"
subtitle: "SOK2009_2024_S1_fasit"
author: "Eirik Eriksen Heen & ChatGPT"
date: "`r format(Sys.Date(), '%d. %b %Y')`"
format: html
editor: visual
execute:
  echo: true
  warning: false
  message: false
  error: false
  freeze: auto
  code-overflow: wrap # Pakker kode som er for lang for linjen
---

```{r start, include = FALSE}
##### Start up #####
rm(list = ls()) # Empties all data

options(scipen=10) # writes 10 scipens before scientific script
options(digits=10) # writes up to 10 digits


# loading packages
library(tidyverse)
library(gt)
library(moderndive)

# Kode for a kunne bruke norske bokstaver
Sys.setlocale(locale="no_NO")

```

I dette seminaret skal vi hovedsakelig gå igjennom datasettet *house_prices* fra pakken *moderndive*. Dette datasettet ser på hus priser i King County. Dette er et område i Washington state. Dokumentasjon på pakken finner dere her: https://cran.r-project.org/web/packages/moderndive/index.html

```{r}
# Load the dataset
data("house_prices", package = "moderndive")
head(house_prices)
```

# Oppgave 1

### Oppgave 1.1

Spørsmål: Gå til dokumentasjonen for pakken moderndive og finn ut når datasettet house_prices ble samlet inn.



### Oppgave 1.2

Vi deler ofte data inn i kategoriske og numeriske variabler, eller videre inn i nominelle, ordinal, intervall, og forholdstall. Måten vi håndterer data på avhenger av målenivået for hver variabel.

Spørsmål: Hvilket målenivå har følgende variabler i datasettet `house_prices`?

-   `id`: unik id til hvert hus, nominallnivå

-   `date`: tidspunkt for slag av huset. oftes tenkt som intervalle eller forholdstall

-   `price`: Prisen på solgt hus. forholdstall

-   `waterfront`: Om huset har utsikt til hav/vann. Dummy variabel, Nominal nivå

-   `view`: Om noe har vert på visning: Dummy variabel, nominal nivå

-   `condition`: score/karakter på hvor god forfattning huset er. Ordinal nivå

-   `grade`: en karakter på huset som helhet, ordinal nivå

-   `zipcode`: postkode, nominalnivå

### Oppgave 1.3

Siden vi ofte er interessert i huspriser, skal vi lage en oversikt over husprisene med følgende oppgaver:

-   **Oppgave 1.3a:** Lag et histogram og et density-plott av husprisene.

```{r}
# Kallre opp datasettet house_price
house_prices %>%
  # Genererer et ggplot objekt
  ggplot(aes(x=price)) +
  # lager et histogram med 50 søyler
  geom_histogram(bins = 50) +
  # Gir x et nytt navn
  xlab("Priser") +
  # Lager en overskift til graphen
  ggtitle("Histogram av hus prisene")
  
```


```{r}
# Kaller opp datsettet house_price
house_prices %>%
  # lager et ggplot object
  ggplot(aes(x=price)) +
  # lager et densitity plott
  geom_density() +
  # Gir x aksen et nytt navn
  xlab("Priser") +
  # Lager en overskrift til graphen
  ggtitle("Tetthetsplot av hus prisene")
```


-   **Oppgave 1.3b:** Lag en deskriptiv statistikk av husprisene.

Vi kan gjøre dette enkelt med `summary` funksjonen.
```{r}
# Lager deskpriftiv statistikk av priser
summary(house_prices$price)
```

Hvis vi ønsker mer informasjon om pris må vil skrive koden selv. 

```{r}
# Kaller opp datasettet house_prices
house_prices %>%
  # oppsummering data
  summarize(
    # Gir antallet i gruppen
    n = n(),
    # Finner minimum
    min = quantile(price, na.rm = TRUE)[1], 
    # Finner første kvartil, altså verdien som deler 25% nederst verdiene fra resten
    Q1 = quantile(price, na.rm = TRUE)[2],
    # Finner andre kvartil og medianene, altså verdien som deler 50% nederst verdiene fra resten 
    Q2_median = quantile(price, na.rm = TRUE)[3],
    # Finner tredje kvartil, altså verdien som deler 75% nederst verdiene fra resten
    Q3 = quantile(price, na.rm = TRUE)[4],
    # Finner høyeste verdi
    max = quantile(price, na.rm = TRUE)[5],
    # finner gjennomsnittet og runder av til en desimal
    mean =  round(
      mean(price, na.rm = TRUE), 
      digits = 0),
    # Finner IQR eller distansen hvor 50 % av det midtereste dataen er 
    IQR = quantile(price, na.rm = TRUE)[4] - 
      quantile(price, na.rm = TRUE)[2],
    # Finner standardavviket og avrunder til 2 desimaler
    standar_avvik = round(
      sd(price, na.rm = TRUE),
      digits = 0),
    # regner ut standarfeilen til gjennomsnittet og runder av til 2 desimaler
    standard_error = round(
      sd(price, na.rm = TRUE)/sqrt(n()),
      digits = 0)
            ) %>%
  gt()
```




-   **Oppgave 1.3c:** Sammenlign gjennomsnitt og median av husprisene. Hva kan dette fortelle deg om fordelingen av prisene?

Svar: Vi ser at gjennomsnittet er høyere enn medianen, noe som indikerer at det er noen hus med svært høye priser som drar opp gjennomsnittet. Medianen gir en bedre representasjon av typiske huspriser fordi den ikke påvirkes av ekstreme verdier.

### Oppgave 1.4

Er det forskjell i huspriser basert på kvaliteten på boligen?

-   **Oppgave 1.4a:** Lag et plott som viser sammenhengen mellom pris og kvalitet (condition).

Vi starter med et vanelig boxplot.

```{r}
# kaller opp datasettet house_price
house_prices %>%
  # lager et ggplot objekt
  ggplot(aes(y=price, x=condition)) +
  # Lager et boxplot
  geom_boxplot() +
  # Gir x aksen et nytt navn
  xlab("Kvalitet") +
  # Gir y aksen et nytt navn
  ylab("Pris") +
  # Gir plottet et navn
  ggtitle("Boxplot av hus prisene med forskjellige kvailtetsgrupper")
```
Dette plottet er vanskelig å lese. Vi kan endre litt på dette for å gjøre det lettere å lese. 


Hvis vi filterer vekke alle boliger over 1 000 000 så får vi en gjevnere graph. men vi kutter vekk viktig data som kan hjelpe å forstå fordelingen. 

```{r}
# kaller opp datasettet house_price
house_prices %>%
  # Fjerner alle boligene som koster over 1 000 000
  filter(price<1000000) %>%
  # lager et ggplot objekt
  ggplot(aes(y=price, x=condition)) +
  # Lager et boxplot
  geom_boxplot() +
  # Gir x aksen et nytt navn
  xlab("Kvalitet") +
  # Gir y aksen et nytt navn
  ylab("Pris") +
  # Gir plottet et navn
  ggtitle("Boxplot av hus prisene med forskjellige kvailtetsgrupper")
```

Vi får en oversikt, men de fjerenet den øverset delene av noen av fordelingen og dette kan påvirke utfallet. 

En annen forslag kan være å bruke logaritmisk skala. Dette gjør at vi tar logaritmetabell av en av aksene. De gjør at ting ikke lenger er lineært. Men det kan hjelpe med å se forskjeller mellom grupper. I tillegge lan vi flippe aksene siden et plot er bredere enne det er høyt.


```{r}
# kaller opp datasettet house_price
house_prices %>%
  # lager et ggplot objekt
  ggplot(aes(y=price, x=condition)) +
  # Lager et boxplot
  geom_boxplot() +
  # Gir x aksen et nytt navn
  xlab("Kvalitet") +
  # Gir y aksen et nytt navn
  ylab("Pris") +
  # Gir plottet et navn
  ggtitle("Boxplot av hus prisene med forskjellige kvailtetsgrupper")+
  # Gjør y aksene, altså pris på logaritmisk form. 
  scale_y_log10() +
  # Flipper aksene slik at vi får trekkt ut boksene vår. 
  coord_flip()
```
Det ser ut til at hus med høyerer kvalitet også har høyere pris. men det er liten forskjell mellom gruppe 1 & 2, eller gruppe 3 & 4. Det er mange andre ting som kan påvirke resultatet.

-   **Oppgave 1.4b:** Lag en deskriptiv statistikk som viser sammenhengen mellom pris og kvalitet.

```{r}
# Kaller opp datasettet house_prices
house_prices %>%
  group_by(condition) %>%
  # oppsummering data
  summarize(
    # Gir antallet i gruppen
    n = n(),
    # Finner minimum
    min = quantile(price, na.rm = TRUE)[1], 
    # Finner første kvartil, altså verdien som deler 25% nederst verdiene fra resten
    Q1 = quantile(price, na.rm = TRUE)[2],
    # Finner andre kvartil og medianene, altså verdien som deler 50% nederst verdiene fra resten 
    Q2_median = quantile(price, na.rm = TRUE)[3],
    # Finner tredje kvartil, altså verdien som deler 75% nederst verdiene fra resten
    Q3 = quantile(price, na.rm = TRUE)[4],
    # Finner høyeste verdi
    max = quantile(price, na.rm = TRUE)[5],
    # finner gjennomsnittet og runder av til en desimal
    mean =  round(
      mean(price, na.rm = TRUE), 
      digits = 0),
    # Finner IQR eller distansen hvor 50 % av det midtereste dataen er 
    IQR = quantile(price, na.rm = TRUE)[4] - 
      quantile(price, na.rm = TRUE)[2],
    # Finner standardavviket og avrunder til 2 desimaler
    standar_avvik = round(
      sd(price, na.rm = TRUE),
      digits = 0),
    # regner ut standarfeilen til gjennomsnittet og runder av til 2 desimaler
    standard_error = round(
      sd(price, na.rm = TRUE)/sqrt(n()),
      digits = 0)
            ) %>%
  gt()

```



-   **Oppgave 1.4c:** Hva virker sammenhengen mellom pris og kvalitet å være?

Svar: Det ser ut til at kvaliteten har en positiv sammenheng med prisen. Det er få hus i den dårligste kvaliteten, og prisene øker generelt med bedre kvalitet. De første kvalitetene ser ut til å ha lignende priser, mens prisene øker med høyere kvalitet.

-   **Oppgave 1.4d:** Lag en frekvenstabell over hvor mange boliger som er i hver kvalitets kategori.

```{r}
# Kaller opp datasettet house_price
house_prices %>% 
  # Grupperer på den variablen vi er interesert i
  select(condition) %>% 
  # Fjerne alle observasjoner som har NA eller ikke observasjoner
  na.omit() %>%
  # grupper etter antall timer
  group_by(condition) %>%
  # Teller opp antallet i hver gruppe
  summarise(frekvens = n()) %>%
  # lager en ny variabel som heter relative frekvens
  # round her runder av tallet til to desimaler
  mutate(relative_frekvens = round( frekvens / sum( frekvens), 2 )  ) %>%
  # Her bruker vi coden cumsum for å regne ut den kumulative frekvensen
  mutate(kumulative_frekvens = cumsum(frekvens) ) %>%
  # En siste variable som regner ut kumulative relative frekevns
  mutate(kumulativ_relative_frekvens = round( kumulative_frekvens / sum( frekvens), 2 ) ) %>%
  # Denne funksjonen gjør tabellen litt penere (vi trenger ikke bruke denne koden)
  gt()
```


### Oppgave 1.5

Er det forskjell i huspriser basert på størrelsen på boligen? Hvordan ønsker du å vise denne sammenhengen?

Siden vi har to kontinuerlige variabler er et scatterplot det best å presatnerer dataen på. Men vi kommer til å støte på noen problemer siden det er så mange boliger i datasettet. 



```{r}
# kaller opp datasettet house_price
house_prices %>%
  # Lager et ggplot objekt
  ggplot(aes(y=price,x= sqft_living ))+
  # lager et scatterplott
  geom_point()+
  # legger til en linje som viser sammenhenget mellom punktet
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  # gir x aksen et navn
  xlab("Størrelse i kvadratfoot") +
  # Gir y aksen et navn
  ylab("Pris")+
  # setter inn en overskift
  ggtitle("Plott av bolig pris og størrelse")

```

Her har vi to problemer mye av plottet er ikke brukt og det er så mange punkter på samme plass. Vi kan starte med å resudere antall punkter til 1000 dette burde gi oss en oversikt over hvordan dataen er fordelt. 


```{r}
# setter en seed slik at vi får samme graph
set.seed(1337)

# kaller opp datasettet house_price
house_prices %>%
  # trekker ut 1000 forskellige boliger
  slice_sample(n=1000) %>%
  # Lager et ggplot objekt
  ggplot(aes(y=price,x= sqft_living ))+
  # lager et scatterplott
  geom_point()+
  # legger til en linje som viser sammenhenget mellom punktet
  geom_smooth(method = "lm", se = FALSE, color = "blue")+
    # gir x aksen et navn
  xlab("Størrelse i kvadratfoot") +
  # Gir y aksen et navn
  ylab("Pris")+
  # setter inn en overskift
  ggtitle("Plott av bolig pris og størrelse")


```

Dette er bra, men vi kan ta et siste steg. 

```{r}
# setter en seed slik at vi får samme graph
set.seed(1337)

# kaller opp datasettet house_price
house_prices %>%
  # trekker ut 1000 forskellige boliger
  slice_sample(n=1000) %>%
  # Lager et ggplot objekt
  ggplot(aes(y=price,x= sqft_living ))+
  # lager et scatterplott
  geom_point()+
  # legger til en linje som viser sammenhenget mellom punktet
  geom_smooth(method = "lm", se = FALSE, color = "blue")+
    # gir x aksen et navn
  xlab("Størrelse i kvadratfoot") +
  # Gir y aksen et navn
  ylab("Pris")+
  # setter inn en overskift
  ggtitle("Plott av bolig pris og størrelse") +
  # gjøre x aksen til logaritmisk form
  scale_x_log10()+
  # gjøre y aksen til lograitmsik form
  scale_y_log10()

```

Dette gjør at dataen ser veldig organisert ut på logaritmsik form. Men det er ikke nødvendig enn så lenge.


```{r}
cor(house_prices$price, house_prices$sqft_living)
```

Svar: Det er en høy korrelasjon mellom størrelsen på boligen og prisen, noe som indikerer at større boliger har høyere priser.

### Oppgave 1.6

Virker det å være noen sammenheng mellom pris og byggeår? Lag en visualisering som viser denne sammenhengen. Finn Pearson r, verdien mellom disse to variablene. 

```{r}

house_prices %>%
  #filter(price < 1000000) %>%
  slice_sample(n=1000) %>%
  ggplot(aes(y = price, x = yr_built)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Legg til lineær trendlinje
  xlab("Byggeår") +
  ylab("Pris") +
  ggtitle("Huspriser basert på byggeår")

```

```{r}
cor(house_prices$price, house_prices$yr_built , use = "pairwise.complete.obs")
```

Vi ser at verdien er postiv, men lav... Så det virker ikke til at bygge år påvirker ikke mye prisen.

### Oppgave 1.7

Lag en krysstabell, men sammenhengen mellom `condition` og `grade`. Virker det til å være en sammenheng mellom dem.

```{r}
# Lager en tabelle med pris og kvalitet
tabell <- table(house_prices$condition, house_prices$grade) 

tabell

```


### Oppgave 1.8

Hvilken av de ovennevnte faktorene ser ut til å ha størst påvirkning på husprisen? Diskuter hvilke faktorer som kan påvirke huspriser mest basert på analysene dine.

De fleste bortsett fra byggeår

# Oppgave 2

### Oppgave 2.1

Vi skal utforske hvordan gjennomsnittet av husprisene `price` kan variere når vi trekker tilfeldige utvalg fra datasettet. Dette gir oss en mulighet til å forstå variabiliteten i gjennomsnittet.

-   **Oppgave 2.1a:** Lag en simulering der du trekker 1000 tilfeldige utvalg fra datasettet, hvor hvert utvalg består av 30 huspriser. For hvert utvalg, beregn gjennomsnittet av husprisene. Visualiser fordelingen av disse gjennomsnittene med et histogram.

```{r}
set.seed(1337)
temp30 = tibble( sim_mean =
                       replicate(n = 1000,
                                 # Henter datasettet house_prices
                                 house_prices %>%
                                  # Henter kun pris
                                   select(price) %>%
                                   # Fjerner alle NA
                                   na.omit() %>%
                                   # henter ut 30 tilfeldige observasjoner
                                   slice_sample(n=30) %>%
                                   # regner ut gjennomsnits høyden
                                   summarise(out = mean(price)) %>%
                                   # henter ut kun høyden 
                                   pull(out)
                                 )
)

ggplot(temp30, aes(x=sim_mean))+
  geom_histogram()

```
Når vi trekker tilfeldige utvalg og beregner gjennomsnittene, forventer vi at fordelingen av gjennomsnittene nærmer seg en normalfordeling, spesielt med stort antall simuleringer. Histogrammet bør vise en klokkeformet kurve som reflekterer sentraltendensen til husprisene.

-   **Oppgave 2.1b:** Beregn den totale gjennomsnittlige husprisen og sammenlign dette med gjennomsnittene fra de 1000 simuleringene. Hvordan stemmer de overens?

```{r}
ggplot(temp30, aes(x=sim_mean))+
  geom_histogram() +
  geom_vline(xintercept = mean(house_prices$price), colour = "red")

```


Den totale gjennomsnittlige husprisen i hele datasettet skal være nær gjennomsnittene fra simuleringene, men med noen variasjoner. Dette gir oss en indikasjon på hvor representativt vårt utvalg er for hele datasettet.

### Oppgave 2.2

Neste trinn er å undersøke hvordan standardavviket til gjennomsnittet endres med størrelsen på utvalget.

-   **Oppgave 2.2a:** Lag en simulering der du trekker 1000 tilfeldige utvalg av forskjellige størrelser (f.eks. 10, 30, 50, 100 huspriser). For hvert utvalg, beregn standardavviket til gjennomsnittet. Visualiser hvordan standardavviket varierer med utvalgsstørrelsen.

```{r}

ggplot(temp30, aes(x=sim_mean))+
  geom_histogram()

sd(temp30$sim_mean)
```

```{r}
set.seed(1337)
temp300 = tibble( sim_mean =
                       replicate(n = 1000,
                                 # Henter datasettet house_prices
                                 house_prices %>%
                                  # Henter kun pris
                                   select(price) %>%
                                   # Fjerner alle NA
                                   na.omit() %>%
                                   # henter ut 300 tilfeldige observasjoner
                                   slice_sample(n=300) %>%
                                   # regner ut gjennomsnits høyden
                                   summarise(out = mean(price)) %>%
                                   # henter ut kun høyden 
                                   pull(out)
                                 )
)

ggplot(temp300, aes(x=sim_mean))+
  geom_histogram()

sd(temp300$sim_mean)
```


-   **Oppgave 2.2b:** Diskuter hvordan standardavviket til gjennomsnittet endres når utvalgsstørrelsen øker. Hva er den teoretiske forklaringen på dette fenomenet?

Standardavviket til gjennomsnitten reduseres når vi legger til flere observasjoner. Dette skylles at usikkerhenten til hvor gjennomsnitter er blir lavere. Store tall lov gjør at hvert sample har mindre varibilitet når de er større. 

### Oppgave 2.3

Vi skal nå se på konfidensintervallene for gjennomsnittet av husprisene. Et konfidensintervall gir et intervall rundt vårt estimerte gjennomsnitt der vi forventer at det sanne gjennomsnittet ligger med en viss sannsynlighet. For eksempel, et 95% konfidensintervall betyr at hvis vi gjentar eksperimentet mange ganger, vil 95% av konfidensintervallene inneholde det sanne gjennomsnittet.

-   **Oppgave 2.3a:** Lag en simulering der du beregner 95% konfidensintervall for gjennomsnittet av husprisene i hvert av 1000 tilfeldige utvalg med størrelse 30. Visualiser fordelingen av konfidensintervallene.

Konfidensintervallene bør i stor grad omfatte det sanne gjennomsnittet av hele datasettet i 95% av simuleringene. Dette bekrefter at intervallene er konsistente med den valgte konfidensnivået.

```{r}
# konfindence intervall av 30 i utvalget

# nedere 2.5% 
quantile(temp30$sim_mean,0.025)
# Øvre 97.5%
quantile(temp30$sim_mean,0.975)


```



```{r}

# konfindence intervall av 300 i utvalget

quantile(temp300$sim_mean,0.025)
quantile(temp300$sim_mean,0.975)
```

La oss sammenligner konfidensintrevallet til utvagene med 30 observasjon og 300 observasjoner. Vi ser at 


-   **Oppgave 2.3b:** På forelesning diskuterte vi hvordan ca 96% av fordeling var innenfor to stanardfeil over og under gjennomsnittet. I disse 1000 simulerte utvalgene, hvor mangen gang er den sanne gjennomsnitte til husprisene innen for dette simulete område. Simuler 1000, hvor du trekker ut 300 observasjoner reng ut områet som skiller to standarfeil over og under gjennomsnittet, og sammenlikn med det virkelige gjennomsnittet. 


```{r}
set.seed(13)

# finner først the sanne gjennomsnittet
gjenn <- mean(house_prices$price, rm.na=TRUE)

# nå må vi generer 1000 konfidensintrevall og teste om konfidensintrevallet inneholder gjennomsnittet




mean( replicate(n = 1000,
          # Henter datasettet house_prices
          house_prices %>%
            # Henter kun pris
            select(price) %>%
            # Fjerner alle NA
            na.omit() %>%
            # henter ut 30 tilfeldige observasjoner
            slice_sample(n=300) %>%
            summarise(out = 
                        mean(price)- 2*sd(price)/sqrt(300) < gjenn &&
                        mean(price)+ 2*sd(price)/sqrt(300) > gjenn     ) %>%
            pull(out)
                                 )
)


```
Her ser vi at 94.7% av gangene jeg simulerte en fordeling så ver det sanne gjennomsnittet innenfor pluss minus 2 standarfeil av gjennomsnittet. 

